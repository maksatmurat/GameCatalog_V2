@*@rendermode InteractiveServer
@using System.Timers
@typeparam TItem


<div class="typeahead">
    <div class="typeahead-controls">
        <input type="text" class="typeahead-input" autocomplete="off"
               placeholder="@OnPlaceHolder"
               @bind-value="@SearchText"
               @bind-value:event="oninput"
               @onclick="ShowResults"
               @onfocusout="FocusOut" />

    </div>
    @if (isSearching)
    {
        <div class="typeahead-all-results">
            <div class="typeahead-result">
                <span>
                    Loading...
                </span>
            </div>
        </div>
    }
    else if (ShowAllResults())
    {
        <div class="typeahead-all-results">
            @foreach (var item in results!)
            {
                <div @key="@item" class="typeahead-result" tabindex="0"
                     @onclick="@(()=>SelectResult(item))"
                     @onmouseover="MouseOverHandler"
                     @onmouseout="MouseOutHandler">
                    @ResultTemplate!(item)
                </div>
            }
        </div>
    }
    else if (NotFound())
    {
        <div class="typeahead-all-results">
            @if (NotFoundTemplate is not null)
            {
                <div class="typeahead-notfound">
                    @NotFoundTemplate
                </div>
            }
            else
            {
                <div class="typeahead-notfound">
                    <span>
                        No results....
                    </span>
                </div>
            }
        </div>
    }
</div>

@code{
    [Parameter] public string? OnPlaceHolder { get; set; }
    [Parameter] public int OnMinimalLenght { get; set; } = 3;
    [Parameter] public int OnTimerInterval { get; set; } = 300;

    [Parameter] public EventCallback<TItem> OnValueChangedHandler { get; set; }
    [Parameter] public Func<string, Task<IEnumerable<TItem>>>? OnSearchHandler { get; set; }

    [Parameter] public RenderFragment<TItem>? ResultTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? NotFoundTemplate { get; set; }


    protected List<TItem>? results = new();

    bool isSearching;
    bool showindAllResult;
    bool isMouseOver;
    Timer? timer;

    string searchText = string.Empty;

    string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            if (value.Length.Equals(0))
            {
                showindAllResult = false;
                timer!.Stop();
                //results = new();
            }
            else if (value.Length >= OnMinimalLenght)
            {
                timer!.Stop();
                timer!.Start();
            }
        }
    }

    protected override void OnInitialized()
    {
        timer = new();
        timer.Interval = OnTimerInterval;
        timer.AutoReset = false;
        timer.Elapsed += Search!;

    }

    protected async void Search(Object semder, ElapsedEventArgs args)
    {
        isSearching = true;
        showindAllResult = false;
        await InvokeAsync(StateHasChanged);

        results = (await OnSearchHandler!.Invoke(searchText)).ToList();

        isSearching = false;
        showindAllResult = true;
        await InvokeAsync(StateHasChanged);
    }

    void ShowResults()
    {
        if (results!.Any())
            showindAllResult = true;
    }
    void FocusOut()
    {
        if (!isMouseOver)
        {
            showindAllResult = false;
        }
    }
    bool ShowAllResults()
    {
        return showindAllResult && results!.Any();
    }
    async Task SelectResult(TItem item)
    {
        SearchText = string.Empty;

        await OnValueChangedHandler.InvokeAsync(item);
    }
    bool NotFound()
    {
        return !results!.Any() && showindAllResult;
    }

    void MouseOverHandler()
    {
        isMouseOver = true;
    }
    void MouseOutHandler()
    {
        isMouseOver = false;
    }
}

<style>
    .typeahead {
        position: relative;
        width: 100%;
        border: 1px groove #bfbfbf;
        border-radius: 5px;
    }

    .typeahead-controls {
        position: relative;
        cursor: text;
        display: flex;
    }

    .typeahead-input {
        flex: 1;
        max-width: 100%;
        border: none;
        padding: 0.5rem;
        border-radius: 5px;
    }

    .typeahead:focus-within {
        box-shadow: 0 0 0 0.2rem rgba(38,143,255,.5);
    }

    .typeahead-input:focus {
        outline: none;
    }

    .typeahead-all-results {
        position: absolute;
        box-shadow: 0 5px 10px rgba(0,0,0,.2);
        border: 1px groove #dbdbdb;
        border-radius: 0 0 5px 5px;
        min-height: 2rem;
        max-height: 30rem;
        overflow-y: auto;
        z-index: 10;
        width: 100%;
        background: #fff;
    }

    .typeahead-result {
        padding: .5rem;
        border-top: 1px groove #fff;
        border-bottom: 1px groove #fff;
    }

        .typeahead-result:hover,
        .typeahead-result:focus {
            background-color: #17a2b8;
            border-top: 1px groove #000;
            border-bottom: 1px groove #000;
            color: #fff;
            cursor: pointer;
        }

    input::placeholder {
        color: #cbcbcb99;
        font-size: 1.2em;
        font-style: italic;
    }
</style>*@
